import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.security.SignatureException;
import java.util.*;

public class mainWindow extends JFrame implements ActionListener {

    configClass config = new configClass();
    JLabel lblTitle;
    JLabel lblDescription;
    JPanel pnlBottom;
    JPanel pnlCenter;
    JButton btnVerify;
    JButton btnSource;
    JTextField txtInput;

    accessControl access = new accessControl();

    public mainWindow() {
        super();

        setTitle(config.windowTitle);
        setSize(config.width, config.height);
        setLayout(new BorderLayout());

        setupUI();

        setVisible(true);
    }

    private void setupUI() {
        // TITLE
        lblTitle = new JLabel("<html><h1>"+config.title+"</h1></html>", SwingConstants.CENTER);
        add(lblTitle, BorderLayout.NORTH);

        // CENTER
        pnlCenter = new JPanel(new BorderLayout());
        add(pnlCenter, BorderLayout.CENTER);

        lblDescription = new JLabel(config.description, SwingConstants.CENTER);
        pnlCenter.add(lblDescription, BorderLayout.CENTER);

        btnSource = new JButton(config.btnSource);
        btnSource.addActionListener(this);
        pnlCenter.add(btnSource, BorderLayout.SOUTH);

        //BOTTOM
        pnlBottom = new JPanel(new BorderLayout());
        add(pnlBottom, BorderLayout.SOUTH);

        txtInput = new JTextField(config.txtInput, 1);
        pnlBottom.add(txtInput, BorderLayout.CENTER);

        btnVerify = new JButton(config.btnVerify);
        btnVerify.addActionListener(this);
        pnlBottom.add(btnVerify, BorderLayout.EAST);

        // color setup
        getContentPane().setBackground(Color.DARK_GRAY);
        pnlCenter.setBackground(Color.DARK_GRAY);
        pnlBottom.setBackground(Color.DARK_GRAY);
        btnSource.setBackground(Color.darkGray);
        btnSource.setForeground(Color.CYAN);
    }

    public void actionPerformed( ActionEvent e ) {
        if( e.getSource() == btnSource ) {
            JOptionPane.showMessageDialog(this, config.sourcecode);
        }

        if( e.getSource() == btnVerify ) {
            boolean pass;
            try {
                pass = verify_password(txtInput.getText());
            } catch (SignatureException ex) {
                throw new RuntimeException(ex);
            }
            if( pass ) {
                JOptionPane.showMessageDialog(
                        this,
                        config.allow + "      " + access.rng.ints(8).hashCode(),
                        config.allow,
                        JOptionPane.PLAIN_MESSAGE
                        );
                closeWindow();
            }
            else {
                JOptionPane.showMessageDialog(
                        this,
                        config.deny,
                        config.deny,
                        JOptionPane.WARNING_MESSAGE
                );
            }
        }
    }

    private void closeWindow() {
        dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }

    private boolean verify_password(String input) throws SignatureException {
        byte[] signature = new byte[48];
        Arrays.fill(signature, (byte) 1);

        if( input.length() > signature.length )
            return false;

        for(int i = 0; i < input.length(); i++ ) {
            signature[i] = (byte) Character.getNumericValue(input.charAt(i));
        }

        return access.sig.verify(signature);
    }
}
